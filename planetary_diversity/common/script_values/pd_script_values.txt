
#To use one of them, refer to them elsewhere in script via "value:<value>" e.g. value:example_value
#IMPORTANT NOTE: Be mindful of performance when using these in triggers that are checked often!

# example_value = {
# 	base = 10 #default: 0

# 	# List of valid mathematical operations:
# 	# 	Numerical (modifying by a number):
# 	# 	- set/weight (both do the same, replaces the current result with this value)
# 	# 	- add
# 	# 	- subtract
# 	# 	- factor/mult/multiply ("multiply" fits the name scheme of the rest better, but the other two were kept for historical reasons)
# 	# 	- divide
# 	# 	- modulo
# 	# 	- round_to (rounds to nearest of that value, e.g. 10.7 round_to 5 gives you 10)
# 	# 	- max (sets to specified value if currently above it)
# 	# 	- min (sets to specified value if currently below it)
# 	# 	- pow (value is multiplied by itself to the power of x; be careful, you can get overflows if you are not careful)
# 	# 	Simple (do not need a number, but just "yes", e.g. "round = yes")
# 	# 	- round (sets to nearest full number)
# 	# 	- ceiling (rounds up)
# 	# 	- floor (rounds down)
# 	# 	- abs (multiply by -1 if negative)
# 	# 	- square (multiply by itself)
# 	# 	- square_root

# 	#All mathematical operations except weight and factor can be used inline e.g.
# 	add = 100
# 	multiply = value:some_other_script_value
# 	round = yes
# 	#(Note: weight and factor will instead overwrite the base value - use set, mult or multiply instead)

# 	#They can also be used in modifier = {} fields, which lets you only apply them if triggers are true
# 	modifier = {
# 		max = owner.max_example_variable 					#Variable set by set_variable
# 		owner = { is_variable_set = max_example_variable }	#Only applied if this trigger is true
# 	}
# 	# What works for right hand side values of mathematical operations? See events/00_how_to_use_variables for full list.

# 	complex_trigger_modifier = { 	#This lets you get the value of a trigger that you can't use in one-liners because it uses {}
# 		trigger = count_owned_planet
# 		trigger_scope = owner 		#Lets you get the result of the trigger on a different scope. Default is "this"
# 		parameters = { 				#Stick any further information necessary in here, like you'd do within the {} of the trigger normally
# 			limit = { pop_amount > 10 }
# 		}
# 		mode = add 					#Allows all numerical operations
# 		mult = 5 					#Multiplies the outcome by this. In this example, this means adding 5 for each planet with more than 10 pops
# 	}
# }

# Final note: script_values use the same metascript system as scripted_triggers and scripted_effects
# This means that you can input parameters into them, in a similar fashion as described in scripted_effects/99_advanced_documentation.txt
# For format for doing so is value:my_value|PARAM1|value1|PARAM2|value2|.
# Then you can use $PARAM1$ in the script value and it will replace it with value1

#Count Modifiers in System
num_pd_domed_modifiers = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_system_planet
		parameters = {
			limit = {
				pd_has_domed_base_modifier = yes
			}
		}
		mode = add
	}
}
#Total Jobs for Upkeep
num_pd_total_jobs_bases = {
	base = 0
	add = value:num_pd_research_jobs_from_hubs
	add = value:num_pd_miner_jobs_from_hubs
	add = value:num_pd_energy_jobs_from_hubs
	add = value:num_pd_food_jobs_from_hubs
}
num_pd_total_jobs_moon = {
	base = 0
	add = value:num_pd_trade_jobs
	add = value:num_pd_military_jobs
	add = value:num_pd_factory_jobs
	add = value:num_pd_foundry_jobs
	add = value:num_pd_admin_jobs
	add = value:num_pd_priest_jobs
}
num_pd_total_jobs = {
	base = 0
	add = value:num_pd_total_jobs_bases
	add = value:num_pd_total_jobs_moon
}
#Moon Jobs
num_pd_moon_jobs = {
	base = 1
	modifier = {
		add = 2
		planet = { has_upgraded_capital = yes }
	}
	modifier = {
		add = 3
		planet = { has_major_upgraded_capital = yes }
	}
	modifier = {
		add = 6
		planet = { has_fully_upgraded_capital = yes }
	}
	floor = yes
}
#Trade Moon
num_pd_moon_bases_trade = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_system_planet
		parameters = {
			limit = {
				is_moon = yes
				has_modifier = pd_moon_base_trade
			}
		}
		mode = add
	}
}
num_pd_trade_jobs = {
	base = 0
	add = value:num_pd_moon_jobs
	mult = solar_system.value:num_pd_moon_bases_trade
}
#Military Moon
num_pd_moon_bases_military = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_system_planet
		parameters = {
			limit = {
				is_moon = yes
				has_modifier = pd_moon_base_military
			}
		}
		mode = add
	}
}
num_pd_military_jobs = {
	base = 0
	add = value:num_pd_moon_jobs
	mult = solar_system.value:num_pd_moon_bases_military
}
#Factory Moon
num_pd_moon_bases_factory = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_system_planet
		parameters = {
			limit = {
				is_moon = yes
				has_modifier = pd_moon_base_factory
			}
		}
		mode = add
	}
}
num_pd_factory_jobs = {
	base = 0
	add = value:num_pd_moon_jobs
	mult = solar_system.value:num_pd_moon_bases_factory
}
#Foundry Moon
num_pd_moon_bases_foundry = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_system_planet
		parameters = {
			limit = {
				is_moon = yes
				has_modifier = pd_moon_base_foundry
			}
		}
		mode = add
	}
}
num_pd_foundry_jobs = {
	base = 0
	add = value:num_pd_moon_jobs
	mult = solar_system.value:num_pd_moon_bases_foundry
}
#Admin Moon
num_pd_moon_bases_admin = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_system_planet
		parameters = {
			limit = {
				is_moon = yes
				has_modifier = pd_moon_base_admin
			}
		}
		mode = add
	}
}
num_pd_admin_jobs = {
	base = 0
	add = value:num_pd_moon_jobs
	mult = solar_system.value:num_pd_moon_bases_admin
}
#Priest Moon
num_pd_moon_bases_priest = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_system_planet
		parameters = {
			limit = {
				is_moon = yes
				has_modifier = pd_moon_base_priest
			}
		}
		mode = add
	}
}
num_pd_priest_jobs = {
	base = 0
	add = value:num_pd_moon_jobs
	mult = solar_system.value:num_pd_moon_bases_priest
}

#Domed Bases
num_pd_jobs_from_hubs = {
	base = 1
	modifier = {
		add = 2
		planet = { has_upgraded_capital = yes }
	}
	modifier = {
		add = 3
		planet = { has_major_upgraded_capital = yes }
	}
	modifier = {
		add = 6
		planet = { has_fully_upgraded_capital = yes }
	}
	divide = solar_system.value:num_pd_solar_system_total_hubs
	floor = yes
	min = 1
}
num_pd_solar_system_total_hubs = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_system_planet
		parameters = {
			limit = {
				has_deposit = d_pd_solar_system_network_hub
			}
		}
		mode = add
	}
	min = 1
}
#Research
num_pd_solar_system_bases_research = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_system_planet
		parameters = {
			limit = {
				has_modifier = pd_domed_base_research
			}
		}
		mode = add
	}
}
num_pd_research_jobs_from_hubs = {
	base = 0
	add = value:num_pd_jobs_from_hubs
	mult = solar_system.value:num_pd_solar_system_bases_research
}
#Mining
num_pd_solar_system_bases_mining = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_system_planet
		parameters = {
			limit = {
				has_modifier = pd_domed_base_mining
			}
		}
		mode = add
	}
}
num_pd_miner_jobs_from_hubs = {
	base = 0
	add = value:num_pd_jobs_from_hubs
	mult = solar_system.value:num_pd_solar_system_bases_mining
}
#Energy
num_pd_solar_system_bases_energy = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_system_planet
		parameters = {
			limit = {
				has_modifier = pd_domed_base_energy
			}
		}
		mode = add
	}
}
num_pd_energy_jobs_from_hubs = {
	base = 0
	add = value:num_pd_jobs_from_hubs
	mult = solar_system.value:num_pd_solar_system_bases_energy
}
#Food
num_pd_solar_system_bases_food = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_system_planet
		parameters = {
			limit = {
				has_modifier = pd_domed_base_food
			}
		}
		mode = add
	}
}
num_pd_food_jobs_from_hubs = {
	base = 0
	add = value:num_pd_jobs_from_hubs
	mult = solar_system.value:num_pd_solar_system_bases_food
}

