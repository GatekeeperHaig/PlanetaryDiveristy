namespace = pd_necro_ray

# Planetkiller
planet_event = {
	id = pd_necro_ray.01
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		OR = {
			habitable_planet_not_urban = yes
			is_planet_class = pc_ringworld_habitable
			is_planet_class = pc_hive
			is_planet_class = pc_machine
			is_planet_class = pc_relic
			is_planet_class = pc_nuked
			pd_is_planet_class_all = yes
		}
	}

	immediate = {
		from.owner = { country_event = { id = pd_necro_ray.02 } }

		#Dismantle observation post
		if = {
			limit = {
				has_observation_outpost = yes
			}
			observation_outpost_owner = {
				country_event = { id = planet_destruction.1000 days = 1 }
			}
		}

		if = {
			limit = {
				exists = owner
				owner = {
					NOT = { is_same_value = from.owner }
				}
				OR = {
					is_active_resolution = "resolution_rulesofwar_independent_tribunals"
					is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
					is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
				}
			}
			from.owner = {
				set_timed_country_flag = { flag = resolution_breached_fired_deluge days = 3600 }
			}
		}
		if = { #you've basically shortcutted terraforming. Yep, that's a breach
			limit = {
				exists = space_owner
				space_owner = {
					is_same_value = from.owner
				}
				OR = {
					NOT = { exists = owner }
					owner = { is_same_value = from.owner }
				}
				OR = {
					is_active_resolution = "resolution_ecology_environmental_control_board"
					is_active_resolution = "resolution_ecology_paradise_initiative"
				}
			}
			from.owner = {
				set_timed_country_flag = { flag = resolution_breached_terraformed days = 3600 }
			}
		}

		if = {
			limit = {
				exists = owner
				owner = {
					NOT = { is_same_value = from.owner }
					OR = {
						is_country_type = default
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
				}
			}
			# Generate threat
			add_threat = { who = from.owner amount = 3 }
			# modifier for allies + those upset by robots
			every_country = {
				limit = {
					NOR = {
						is_same_value = from.owner
						is_same_value = root.owner
						AND = {
							has_federation = yes
							is_in_federation_with = from.owner
						}
					}
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
				}
				add_opinion_modifier = {
					modifier = opinion_pd_necro_a_world
					who = from.owner
				}
			}
			# modifiers for victim
			owner = {
				add_opinion_modifier = {
					modifier = opinion_pd_necro_my_world
					who = from.owner
				}
				if = {
					limit = { NOT = { has_ethic = ethic_gestalt_consciousness } }
					add_modifier = {
						modifier = colossus_victim
						days = 10800 # 30 years
					}
				}
			}
		}
		else_if = {
			limit = {
				exists = owner
				owner = { is_country_type = primitive }
			}
			# modifier for allies + those upset by genocide
			every_country = {
				limit = {
					NOR = { is_same_value = from.owner }
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					is_country_type = default
					NOR = {
						is_xenophobe = yes
						is_homicidal = yes
						is_xenophile = yes
					}
				}
				add_opinion_modifier = {
					modifier = opinion_pd_necro_a_primitive_world
					who = from.owner
				}
			}
			every_country = {
				limit = {
					NOR = { is_same_value = from.owner }
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						has_ai_personality = awakened_fallen_empire_xenophile
						AND = {
							is_country_type = default
							is_xenophile = yes
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_pd_necro_a_primitive_world_phile
					who = from.owner
				}
			}
		}
		# Add war exhaustion to planet owner
		if = {
			limit = {
				exists = owner
				owner = { NOT = { is_same_value = from.owner } }
			}
			owner = {
				if = {
					limit = { #isn't the case when the crisis bombards planets, for instance
						is_at_war_with = from.owner
					}
					add_static_war_exhaustion = {
						attacker = from.owner
						location = root
						value_for_planet_destruction = 1.0
					}
				}
			}
		}

		every_owned_pop_group = {
			limit = {
				OR = {
					has_trait = trait_hive_mind
					has_trait = trait_mechanical
					has_trait = trait_machine_unit
				}
			}
			kill_all_pop = yes
		}
		every_owned_pop_group = {
			limit = {
				has_modifier = pop_recently_conquered
			}
			remove_modifier = pop_recently_conquered
		}
		every_owned_pop_group = {
			limit = {
				NOR = {
					has_trait = trait_hive_mind
					has_trait = trait_mechanical
					has_trait = trait_machine_unit
					has_trait = trait_zombie
				}
			}
			modify_species = {
				species = this
				add_trait = trait_zombie
				add_traits_at_start_of_list = yes
				change_scoped_species = yes
			}
		}
		if = {
			limit = { #were there any Aquatic pops? If so, the ownership needs to be flipped
				any_owned_pop_group = {
					is_scope_valid = yes
					exists = this
				}
				owner = {
					NOT = { is_same_value = from.owner }
				}
			}
			set_owner = from.owner
		}
		clear_planet_modifiers = yes
		if = {
			limit = {
				habitable_planet_not_urban = yes
			}
			change_pc = pc_nuked
		}
		if = {
			limit = {
				OR = {
					habitable_planet_not_urban = yes
					is_planet_class = pc_ringworld_habitable
					is_planet_class = pc_hive
					is_planet_class = pc_machine
					is_planet_class = pc_relic
					is_planet_class = pc_nuked
				}
			}
			add_modifier = {
				modifier = pd_aw_necro_planet
				days = -1
			}
		}
		if = {
			limit = {
				is_planet_class = pc_city
			}
			add_modifier = {
				modifier = pd_aw_necro_city_planet
				days = -1
			}
		}
		pd_aw_create_necro_world_effect = yes
		pd_create_necro_world_effect = yes
	}
}

country_event = {
	id = pd_necro_ray.02
	title = pd_necro_ray.02.name
	desc = pd_necro_ray.02.desc
	picture = GFX_evt_death_from_above
	show_sound = event_mystic_reveal
	location = from

	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = fired_pdnecroray }
	}

	immediate = {
		set_country_flag = fired_pdnecroray
	}

	option = {
		name = EXCELLENT
		from = {
			custom_tooltip = pd_necro_ray.02.tooltip
		}
	}
}

