namespace = planet_destruction

# Deluge
planet_event = {
	id = planet_destruction.700
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				NOT = { is_planet_class = pc_ai }
			}
			from.owner = { country_event = { id = planet_destruction.701 } }
		}

		#Dismantle observation post
		if = {
			limit = {
				has_observation_outpost = yes
			}
			observation_outpost_owner = {
				country_event = { id = planet_destruction.1000 days = 1 }
			}
		}
		if = {
			limit = {
				is_planet_class = pc_ai
				NOT = { has_planet_flag = machine_lair }
			}
			#set_planet_flag = destroyed_by_colossus
			set_planet_flag = planet_drenched
			planet_event = { id = crisis.2040 }
			create_ambient_object = {
				location = this
				type = habitat_cracker_object
				duration = 5

				use_3d_location = yes
				base_angle_towards = star
				entity_face_object = star

				entity_offset = { min = 0 max = 0 }

				entity_scale_to_size = yes
				scale = 0.5
			}
		}

		# Contingency Final Machine World
		if = {
			limit = {
				is_planet_class = pc_ai
				has_planet_flag = machine_lair
			}
			#set_planet_flag = destroyed_by_colossus
			set_planet_flag = planet_drenched
			from.owner = { save_event_target_as = final_machine_world_destroyer }
			stop_crisis_sound = yes
			planet_event = { id = crisis.2046 }
			create_ambient_object = {
				location = this
				type = habitat_cracker_object
				duration = 5

				use_3d_location = yes
				base_angle_towards = star
				entity_face_object = star

				entity_offset = { min = 0 max = 0 }

				entity_scale_to_size = yes
				scale = 0.5
			}
		}

		# Swarm Situation Log counter
		if = {
			limit = {
				exists = owner
				owner = { is_country_type = swarm }
			}
			every_country = {
				limit = { has_event_chain = "prethoryn_scourge_chain" }
				add_event_chain_counter = {
					event_chain = "prethoryn_scourge_chain"
					counter = "infested_worlds"
					amount = -1
				}
				add_event_chain_counter = {
					event_chain = "prethoryn_scourge_chain"
					counter = "infested_worlds_cleansed"
					amount = 1
				}
			}
			destroy_colony = yes
		}

		if = {
			limit = {
				exists = owner
				owner = {
					NOT = { is_same_value = from.owner }
				}
				OR = {
					is_active_resolution = "resolution_rulesofwar_independent_tribunals"
					is_active_resolution = "resolution_rulesofwar_last_resort_doctrine"
					is_active_resolution = "resolution_rulesofwar_demobilization_initiative"
				}
			}
			from.owner = {
				set_timed_country_flag = { flag = resolution_breached_fired_deluge days = 3600 }
			}
		}
		if = { #you've basically shortcutted terraforming. Yep, that's a breach
			limit = {
				exists = space_owner
				space_owner = {
					is_same_value = from.owner
				}
				OR = {
					NOT = { exists = owner }
					owner = { is_same_value = from.owner }
				}
				OR = {
					is_active_resolution = "resolution_ecology_environmental_control_board"
					is_active_resolution = "resolution_ecology_paradise_initiative"
				}
			}
			from.owner = {
				set_timed_country_flag = { flag = resolution_breached_terraformed days = 3600 }
			}
		}

		if = {
			limit = {
				exists = owner
				owner = {
					NOT = { is_same_value = from.owner }
					OR = {
						is_country_type = default
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
				}
			}
			# Generate threat
			add_threat = { who = from.owner amount = 3 }
			# modifier for allies + those upset by robots
			every_country = {
				limit = {
					NOR = {
						is_same_value = from.owner
						is_same_value = root.owner
						AND = {
							has_federation = yes
							is_in_federation_with = from.owner
						}
					}
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
				}
				add_opinion_modifier = {
					modifier = opinion_drenched_a_world
					who = from.owner
				}
			}
			# modifiers for victim
			owner = {
				add_opinion_modifier = {
					modifier = opinion_drenched_my_world
					who = from.owner
				}
				if = {
					limit = { NOT = { has_ethic = ethic_gestalt_consciousness } }
					add_modifier = {
						modifier = colossus_victim
						days = 10800 # 30 years
					}
				}
			}
		}
		else_if = {
			limit = {
				exists = owner
				owner = { is_country_type = primitive }
			}
			# modifier for allies + those upset by genocide
			every_country = {
				limit = {
					NOR = { is_same_value = from.owner }
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					is_country_type = default
					NOR = {
						is_xenophobe = yes
						is_homicidal = yes
						is_xenophile = yes
					}
				}
				add_opinion_modifier = {
					modifier = opinion_drenched_a_primitive_world
					who = from.owner
				}
			}
			every_country = {
				limit = {
					NOR = { is_same_value = from.owner }
					OR = {
						has_communications = from.owner
						has_communications = root.owner
					}
					OR = {
						has_ai_personality = awakened_fallen_empire_xenophile
						AND = {
							is_country_type = default
							is_xenophile = yes
						}
					}
				}
				add_opinion_modifier = {
					modifier = opinion_drenched_a_primitive_world_phile
					who = from.owner
				}
			}
		}
		# Add war exhaustion to planet owner
		if = {
			limit = {
				exists = owner
				owner = { NOT = { is_same_value = from.owner } }
			}
			owner = {
				if = {
					limit = { #isn't the case when the crisis bombards planets, for instance
						is_at_war_with = from.owner
					}
					add_static_war_exhaustion = {
						attacker = from.owner
						location = root
						value_for_planet_destruction = 1.0
					}
				}
			}
		}

		every_owned_pop = {
			limit = {
				NOT = { has_trait = trait_aquatic }
			}
			kill_pop = yes
			from.owner = {
				if = {
					limit = { has_ascension_perk = ap_become_the_crisis }
					complete_crisis_objective = crisobj_purge_pops
				}
			}
		}
		if = {
			limit = { #were there any Aquatic pops? If so, the ownership needs to be flipped
				any_owned_pop = {
					is_scope_valid = yes
					exists = this
				}
				owner = {
					NOT = { is_same_value = from.owner }
				}
			}
			set_owner = from.owner
		}
		if = {
			limit = {
				NOT = { is_planet_class = pc_broken }
			}
			change_pc = pc_ocean
			roll_panpelagic = yes # NEW
		}

		# from = { #feedback suggests this isn't fun, but leaving it here in case we need it
		# 	ice_mining_depletion_effect = yes

		# 	if = {
		# 		limit = {
		# 			root = { has_planet_flag = temp_ice_mine_exhausted_flag }
		# 		}
		# 		event_target:mined_system.starbase = {
		# 			remove_starbase_building = {
		# 				building = ice_mining_station
		# 			}
		# 		}
		# 		create_message = {
		# 			type = DELUGE_EXHAUSTED_ICE
		# 			localization = DELUGE_EXHAUSTED_ICE_DESC
		# 			days = 20
		# 			target = root
		# 			variable = {
		# 				type = name
		# 				localization = SYSTEM
		# 				scope = event_target:mined_system
		# 			}
		# 		}
		# 	}
		# }
	}
}